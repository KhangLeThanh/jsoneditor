{"version":3,"sources":["components/TabPanel.js","components/FormatJson.js","components/EditorJson.js","App.js","serviceWorker.js","index.js"],"names":["TabPanel","props","children","FormatJson","data","styles","label","color","marginTop","value","marginLeft","root","fontSize","fontFamily","textAlign","paddingTop","builtin","text","number","property","collapseIcon","cursor","json","onChange","key","parent","localStorage","setItem","JSON","stringify","margin","lineHeight","fontWeight","marginBottom","row","display","withChildrenLabel","select","borderRadius","borderColor","backgroundColor","input","border","padding","width","useStyles","makeStyles","theme","paper","boxShadow","grid","maxWidth","button","App","classes","useState","userInput","setUserInput","setJson","setValue","message","setMessage","className","Grid","container","spacing","item","xs","Paper","style","Typography","variant","component","paddingBottom","onSubmit","event","preventDefault","jsons","parse","e","console","error","setTimeout","TextField","target","fullWidth","type","Button","textTransform","AppBar","position","Tabs","newValue","Tab","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.70a270b3.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function TabPanel(props) {\n  return <div>{props.children}</div>;\n}\n","import React from \"react\";\nimport { JSONViewer } from \"react-json-editor-viewer\";\n\nexport default function FormatJson({ data }) {\n  const styles = {\n    label: {\n        color: \"#000\",\n        marginTop: 4,\n    },\n    value: {\n      marginLeft: 10,\n    },\n    root: {\n      fontSize: 14,\n      fontFamily: \"monospace\",\n      textAlign: \"left\",\n      paddingTop:'2%'\n    },\n    builtin: {\n      color: \"#00f\",\n    },\n    text: {\n      color: \"#077\",\n    },\n    number: {\n      color: \"#a0a\",\n    },\n    property: {\n      color: \"#c00\",\n    },\n    collapseIcon: {\n      cursor: \"pointer\",\n    },\n  };\n  return (\n    <div>\n      <JSONViewer data={data} styles={styles} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { JSONEditor } from \"react-json-editor-viewer\";\n\nexport default function FormatJson({ json }) {\n  const styles = {\n    root: {\n        fontSize: 14,\n        margin: 5,\n      fontFamily: \"monospace\",\n      lineHeight: 1.25,\n      paddingTop:'2%'\n    },\n    label: {\n      color: \"rgb(204, 0, 0)\",\n      fontWeight: \"600\",\n      marginBottom:'10px'\n    },\n    value: {\n      marginLeft: 10,\n      marginBottom:'15px'\n    },\n    row: {\n      display: \"flex\",\n    },\n    withChildrenLabel: {\n      color: \"#000\",\n    },\n    select: {\n      borderRadius: 3,\n      borderColor: \"grey\",\n      backgroundColor: \"#fff\",\n      color: \"#000\",\n      fontWeight: \"600\",\n    },\n    input: {\n      borderRadius: 3,\n      border: \"1px solid #272822\",\n      padding: 2,\n      fontFamily: \"monospace\",\n      fontSize: 12,\n      backgroundColor: \"#fff\",\n      color: \"#000\",\n      width: \"200%\",\n    },\n    builtin: {\n      color: \"#00f\",\n    },\n    \n\n  };\n  const onJsonChange = (key, value, parent, data) => {\n    localStorage.setItem(\"myJsonInLocalStorage\", JSON.stringify(data));\n  };\n  return (\n    <div>\n      <JSONEditor data={json} onChange={onJsonChange} styles={styles} />{\" \"}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TabPanel from \"./components/TabPanel\";\nimport FormatJson from \"./components/FormatJson\";\nimport EditorJson from \"./components/EditorJson\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    boxShadow: \"none\",\n  },\n  grid: {\n    maxWidth: 1280,\n    margin: \"0 auto\",\n    backgroundColor: \"#fff\",\n    padding: \"20px\",\n  },\n  button: {\n    backgroundColor: \"#e09d22\",\n    color: \"#fff\",\n    marginTop: \"15px\",\n    \"&:hover\": {\n      backgroundColor: \"#dea439\",\n    },\n  },\n}));\nconst App = () => {\n  const classes = useStyles();\n  const [userInput, setUserInput] = useState(\"\");\n  const [json, setJson] = useState();\n  const [value, setValue] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const addJson = (event) => {\n    event.preventDefault();\n    try {\n      const jsons = JSON.parse(userInput);\n      setJson(jsons);\n      setMessage(\"\");\n    } catch (e) {\n      console.error(e);\n      setMessage(\"Your json data is invalid\");\n      setTimeout(() => {\n        setMessage(\"\");\n      }, 3000);\n    }\n    setUserInput(\"\");\n  };\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const handleJsonChange = (event) => {\n    setUserInput(event.target.value);\n  };\n\n  return (\n    <div className={classes.grid}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper} style={{ paddingTop: \"2%\" }}>\n            <Typography\n              variant=\"h1\"\n              component=\"h1\"\n              style={{\n                fontWeight: \"700\",\n                fontSize: \"25px\",\n                paddingBottom: \"15px\",\n                textAlign: \"center\",\n              }}\n            >\n              Please insert your json data to the field below\n            </Typography>\n            <form onSubmit={addJson}>\n              <TextField\n                value={userInput}\n                onChange={handleJsonChange}\n                fullWidth\n                label=\"Your json data\"\n                variant=\"outlined\"\n                type=\"text\"\n              />\n              <div style={{ width: \"100%\", textAlign: \"center\" }}>\n                <Button className={classes.button} type=\"submit\">\n                  Format\n                </Button>\n              </div>\n              <Typography\n                variant=\"body2\"\n                style={{\n                  textAlign: \"center\",\n                  color: \"#d80d0d\",\n                  fontSize: \"1.5em\",\n                  marginTop: \"20px\",\n                  textTransform: \"uppercase\",\n                }}\n              >\n                {message}\n              </Typography>\n            </form>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          <AppBar position=\"static\" style={{ backgroundColor: \"#e09d21\" }}>\n            <Tabs value={value} onChange={handleChange}>\n              <Tab label=\"code\" />\n              <Tab label=\"tree\" />\n            </Tabs>\n          </AppBar>\n          {value === 0 && (\n            <TabPanel>\n              <FormatJson data={json} />\n            </TabPanel>\n          )}\n          {value === 1 && (\n            <TabPanel>\n              <EditorJson json={json} />\n            </TabPanel>\n          )}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}